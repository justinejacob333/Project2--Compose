
services:
  #Dind i.e. Docker-in-Docker allows Jenkins the usage of Docker
  dind:
    image: docker:dind #docker image
    user: root # running as root user
    privileged: true #Enabling priveleged mode to run Docker inside container
    container_name: dind
    expose:
      - 2376 # Docker daemon exposed on port 2376
    networks:
       #Attaching conatiner to the network
      jenkins_dind:
        aliases:
    environment:
      DOCKER_TLS_CERTDIR: "/certs" #Directory for TLS certs
    volumes:
      # Volume for Docker certificates
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client
      # Volume to store Jenkins home directory in DinD container
      - jenkins-data:/var/jenkins_home

  #Jenkins service
  jenkins:
    image: jenkins/jenkins:lts-jdk11 # Jenkins image 
    user: root # root user
    container_name: jenkins
    depends_on:
      - dind # This ensures jenkins starts only after DinD is running
    ports:
      - 8080:8080 # Map Jenkins UI port to host machine
      - 50000:50000 # 
    volumes:
      # Volume for Jenkins data 
      - ./jenkins:/var/jenkins_home
      # Mount docker binary from host to allow Jenkins to use Docker
      - /usr/bin/docker:/usr/bin/docker
      # Volume for Docker client certificates in Jenkins
      - docker-certs-client:/certs/client:ro
    environment:
    # Setting up the host to connect Jenkins with Docker daemon in the DinD container
      DOCKER_HOST: "tcp://docker:2376"
      DOCKER_CERT_PATH: "/certs/client" # Docker client certificate path
      DOCKER_TLS_VERIFY: 1 #E nabling TLS verification
    networks:
      - jenkins_dind # Attaching this conatiner to the network

networks:
#Network between Jenkins and Dind 
  jenkins_dind:
    driver: bridge # Bridge network driver for communication between containers

volumes:
#Volumes
  docker-certs-ca:
  docker-certs-client:
  jenkins-data: # volume to persist Jenkins home directory
